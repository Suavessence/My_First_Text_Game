//#include "pch.h"
#include <vector>
#include <iostream>
#include <random>

//global RNG stuff//////////////////////////////////////////////////////////////////////////
std::random_device dev;
std::mt19937 rng(dev());

// structs and classes///////////////////////////////////////////////////////////////////////////
struct Rooms
{
	int num_monsters;
	int num_treasures;
	int num_traps;
	int num_doors;

	Rooms(int constr_monsters, int constr_treasures, int constr_traps, int constr_doors);
};
class Dungeons
{
public:
	int floor1_size = 6;
	int floor2_size = 3;
	int floor3_size = 4;
	int floor4_size = 1;
	int floor5_size = 5;
	int floor6_size = 6;
	int floor7_size = 7;
	int floor8_size = 1;
	
	int current_dim;
	int current_row;
	int current_col;
	
	void set_initial_dim();
	void set_initial_row();
	void set_initial_col();
	
	void move_room_up();
	void move_room_down();
	void move_room_left();
	void move_room_right();
	void move_floor_down();

	std::vector<std::vector<Rooms> > floor1;
	std::vector<std::vector<Rooms> > floor2;
	std::vector<std::vector<Rooms> > floor3;
	std::vector<std::vector<Rooms> > floor4;
	std::vector<std::vector<Rooms> > floor5;
	std::vector<std::vector<Rooms> > floor6;
	std::vector<std::vector<Rooms> > floor7;
	std::vector<std::vector<Rooms> > floor8;

	std::vector<std::vector<std::vector<Rooms> > > dungeon;
	int RNG(int min, int max);
	void fill_floors(); //create the 2D vectors...aka, the floors//////////////////////////////////
	void fill_dungeon(); //create the 3D vector...aka, the entire dungeon, filled with floors
	void print_dungeon(); //display everything in the dungeon
	void print_current_room(int dim, int row, int col); //display the variable values for the current room
	void remove_monster(int dim, int row, int col);
};

// main /////////////////////////////////////////////////////////////////////////////////////////////////
int main()
{
	Dungeons dungeon;
	dungeon.fill_floors();
	dungeon.fill_dungeon();
	dungeon.print_dungeon();
	dungeon.set_initial_dim();
	dungeon.set_initial_row();
	dungeon.set_initial_col();
	
	//dungeon.remove_monster(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//dungeon.remove_monster(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_right();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_down();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_left();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_up();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_floor_down();
	//
	//std::cout << "next\n";
	//
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_right();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_down();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_left();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_up();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_floor_down();
	//
	//
	//std::cout << "next\n";
	//
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_right();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_down();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_left();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//dungeon.move_room_up();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
	//
	//std::cout << "next\n";
	//
	//dungeon.move_floor_down();
	//dungeon.print_current_room(dungeon.current_dim, dungeon.current_row, dungeon.current_col);
}
// RNG ///////////////////////////////////////////////////////////////////////////////////////////////
int Dungeons::RNG(int min, int max)
{
	std::uniform_int_distribution<std::mt19937::result_type> dist6(min, max); // distribution in range (min_atk, max_atk)
	return dist6(rng);
}

//functions to build the dungeon//////////////////////////////////////////////////////////////////////
Rooms::Rooms(int constr_monsters, int constr_treasures, int constr_traps, int constr_doors)
{
	num_monsters = constr_monsters;
	num_treasures = constr_treasures;
	num_traps = constr_traps;
	num_doors = constr_doors;
}

void Dungeons::fill_floors() //create the 2D vectors...aka, the floors//////////////////////////////////
{
	for (int i = 0; i < floor1_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor1_size; j++)
		{
			Rooms room(RNG(0,9), RNG(2,4), RNG(3,5), RNG(0,1)); //get random numbers for room variables
			temp.push_back(room);
		}
		floor1.push_back(temp);
	}

	for (int i = 0; i < floor2_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor2_size; j++)
		{
			Rooms room(RNG(0, 1), RNG(2, 4), RNG(3, 5), RNG(0, 1));
			temp.push_back(room);
		}
		floor2.push_back(temp);
	}

	for (int i = 0; i < floor3_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor3_size; j++)
		{
			Rooms room(RNG(0, 1), RNG(2, 4), RNG(3, 5), RNG(0, 1));
			temp.push_back(room);
		}
		floor3.push_back(temp);
	}

	for (int i = 0; i < floor4_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor4_size; j++)
		{
			Rooms room(RNG(0, 1), RNG(2, 4), RNG(3, 5), RNG(0, 1));
			temp.push_back(room);
		}
		floor4.push_back(temp);
	}

	for (int i = 0; i < floor5_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor5_size; j++)
		{
			Rooms room(RNG(0, 1), RNG(2, 4), RNG(3, 5), RNG(0, 1));
			temp.push_back(room);
		}
		floor5.push_back(temp);
	}

	for (int i = 0; i < floor6_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor6_size; j++)
		{
			Rooms room(RNG(0, 1), RNG(2, 4), RNG(3, 5), RNG(0, 1));
			temp.push_back(room);
		}
		floor6.push_back(temp);
	}

	for (int i = 0; i < floor7_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor7_size; j++)
		{
			Rooms room(RNG(0, 1), RNG(2, 4), RNG(3, 5), RNG(0, 1));
			temp.push_back(room);
		}
		floor7.push_back(temp);
	}

	for (int i = 0; i < floor8_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor8_size; j++)
		{
			Rooms room(RNG(0, 1), RNG(2, 4), RNG(3, 5), RNG(0, 1));
			temp.push_back(room);
		}
		floor8.push_back(temp);
	}
}
void Dungeons::fill_dungeon()//create the 3D vector...aka, the entire dungeon, filled with floors//////////////////////////////////
{
	dungeon.push_back(floor1);
	dungeon.push_back(floor2);
	dungeon.push_back(floor3);
	dungeon.push_back(floor4);
	dungeon.push_back(floor5);
	dungeon.push_back(floor6);
	dungeon.push_back(floor7);
	dungeon.push_back(floor8);
}

//functions to print stuff///////////////////////////////////////////////////////////////////////////
void Dungeons::print_dungeon() //iterate through the entire dungeon////
{
	for (int d = 0; d < dungeon.size(); d++)
	{
		if (d == 0)
		{
			std::cout << "Floor 1" << std::endl;
			std::cout << "Size: " << floor1_size << " X " << floor1_size << std::endl;
			for (int i = 0; i < floor1.size(); i++)
			{
				for (int j = 0; j < floor1[i].size(); j++)
				{
					std::cout << floor1[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 1)
		{
			std::cout << "Floor 2" << std::endl;
			std::cout << "Size: " << floor2_size << " X " << floor2_size << std::endl;
			for (int i = 0; i < floor2.size(); i++)
			{
				for (int j = 0; j < floor2[i].size(); j++)
				{
					std::cout << floor2[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 2)
		{
			std::cout << "Floor 3" << std::endl;
			std::cout << "Size: " << floor3_size << " X " << floor3_size << std::endl;
			for (int i = 0; i < floor3_size; i++)
			{
				for (int j = 0; j < floor3[i].size(); j++)
				{
					std::cout << floor3[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 3)
		{
			std::cout << "Floor 4" << std::endl;
			std::cout << "Size: " << floor4_size << " X " << floor4_size << std::endl;
			for (int i = 0; i < floor4.size(); i++)
			{
				for (int j = 0; j < floor4[i].size(); j++)
				{
					std::cout << floor4[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 4)
		{
			std::cout << "Floor 5" << std::endl;
			std::cout << "Size: " << floor5_size << " X " << floor5_size << std::endl;
			for (int i = 0; i < floor5.size(); i++)
			{
				for (int j = 0; j < floor5[i].size(); j++)
				{
					std::cout << floor5[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 5)
		{
			std::cout << "Floor 6" << std::endl;
			std::cout << "Size: " << floor6_size << " X " << floor6_size << std::endl;
			for (int i = 0; i < floor6.size(); i++)
			{
				for (int j = 0; j < floor6[i].size(); j++)
				{
					std::cout << floor6[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 6)
		{
			std::cout << "Floor 7" << std::endl;
			std::cout << "Size: " << floor7_size << " X " << floor7_size << std::endl;
			for (int i = 0; i < floor7.size(); i++)
			{
				for (int j = 0; j < floor7[i].size(); j++)
				{
					std::cout << floor7[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 7)
		{
			std::cout << "Floor 8" << std::endl;
			std::cout << "Size: " << floor8_size << " X " << floor8_size << std::endl;
			for (int i = 0; i < floor8.size(); i++)
			{
				for (int j = 0; j < floor8[i].size(); j++)
				{
					std::cout << floor8[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		std::cout << std::endl;
	}
}

void Dungeons::print_current_room(int dim, int row, int col)
{
    //std::cout << "dungeon[dim][row][col].num_monsters\n" << std::endl;
    //std::cout << current_dim << " " << current_row << " " << current_col << std::endl;
    std::cout << dungeon[dim][row][col].num_monsters << std::endl;
}

//functions to set initial location/////////////////////////////////////////////////////////
void Dungeons::set_initial_dim()
{
    current_dim = 0;
}
void Dungeons::set_initial_row()
{
    current_row = 0;
}
void Dungeons::set_initial_col()
{
    current_col = 0;
}

//functions to change current location////////////////////////////////////
void Dungeons::move_room_up()
{
    current_row--;
}
void Dungeons::move_room_down()
{
    current_row++;
}
void Dungeons::move_room_left()
{
    current_col--;
}
void Dungeons::move_room_right()
{
    current_col++;
}
void Dungeons::move_floor_down()
{
    current_dim++;
    current_row = 0; //doing this to ensure even a 1x1 floor functions properly. For larger floors, this will eliminate the randomness of the starting room.
    current_col = 0; //doing this to ensure even a 1x1 floor functions properly. For larger floors, this will eliminate the randomness of the starting room.
}

//functions to manipulate room variables///////////////////////////////////////////////////////////////////////////////////
void Dungeons::remove_monster(int dim, int row, int col)
{
    dungeon[dim][row][col].num_monsters--;
}
