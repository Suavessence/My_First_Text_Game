//#include "pch.h"
#include <vector>
#include <iostream>
#include <random>

//global RNG stuff//////////////////////////////////////////////////////////////////////////
std::random_device dev;
std::mt19937 rng(dev());

// structs and classes///////////////////////////////////////////////////////////////////////////
struct Rooms
{
	int num_monsters;
	int num_treasures;
	int num_traps;
	int num_doors;

	Rooms(int constr_monsters, int constr_treasures, int constr_traps, int constr_doors);
};
class Dungeons
{
public:
	int floor1_size = 2;
	int floor2_size = 3;
	int floor3_size = 4;
	int floor4_size = 1;
	int floor5_size = 5;
	int floor6_size = 6;
	int floor7_size = 7;
	int floor8_size = 1;

	std::vector<std::vector<Rooms> > floor1;
	std::vector<std::vector<Rooms> > floor2;
	std::vector<std::vector<Rooms> > floor3;
	std::vector<std::vector<Rooms> > floor4;
	std::vector<std::vector<Rooms> > floor5;
	std::vector<std::vector<Rooms> > floor6;
	std::vector<std::vector<Rooms> > floor7;
	std::vector<std::vector<Rooms> > floor8;

	std::vector<std::vector<std::vector<Rooms> > > dungeon;
	int rnng(int, int);
    void calc_room_parameters(); //calls rng() to calculate room parameters then calls and passes them to create_rooms()
    void create_rooms(int, int, int, int); //this creates room objects, designed with Rooms constructors, then calls and passes them to fill_floors()
	void fill_floors(Rooms& r1, Rooms& r2, Rooms& r3, Rooms& r4, Rooms& r5, Rooms& r6, Rooms& r7, Rooms& r8); //create the 2D vectors...aka, the floors//////////////////////////////////
	void fill_dungeon(); //create the 3D vector...aka, the entire dungeon, filled with floors
	void print_dungeon(); //display everything in the dungeon
};

// main /////////////////////////////////////////////////////////////////////////////////////////////////
int main()
{

	Dungeons dungeon;
	dungeon.calc_room_parameters(); 
	dungeon.fill_dungeon();
	dungeon.print_dungeon();
}
// definitions /////////////////////////////////////////////////////////////////////////////////////////////
Rooms::Rooms(int constr_monsters, int constr_treasures, int constr_traps, int constr_doors)
{
	num_monsters = constr_monsters;
	num_treasures = constr_treasures;
	num_traps = constr_traps;
	num_doors = constr_doors;
}
int Dungeons::rnng(int min, int max)
{
    std::uniform_int_distribution<std::mt19937::result_type> dist6(min, max); // distribution in range (min_atk, max_atk)
    return dist6(rng);
}
void Dungeons::calc_room_parameters() //calls rng() to calculate room parameters then calls and passes them to create_rooms()
{
    int r1_num_monsters = rnng(2,99);
    int r1_num_treasures = rnng(0,1);
    int r1_num_traps = 0;
    int r1_num_doors = rnng(1,4);
    
    create_rooms(r1_num_monsters, r1_num_treasures, r1_num_traps, r1_num_doors);
}
void Dungeons::create_rooms(int r1_monsters, int r1_treasures, int r1_traps, int r1_doors) //this creates room objects, designed with Rooms constructors, then calls and passes them to fill_floors()
{
    //arguments are received from calc_room_parameters(). Go there to set them.
    Rooms r1(r1_monsters, r1_treasures, r1_traps, r1_doors);
    Rooms r2(1,2,3,4);
    Rooms r3(1,2,3,4);
    Rooms r4(1,2,3,4);
    Rooms r5(1,2,3,4);
    Rooms r6(1,2,3,4);
    Rooms r7(1,2,3,4);
    Rooms r8(1,2,3,4);
    
    fill_floors(r1, r2, r3, r4, r5, r6, r7, r8);
    
}
void Dungeons::fill_floors(Rooms& r1, Rooms& r2, Rooms& r3, Rooms& r4, Rooms& r5, Rooms& r6, Rooms& r7, Rooms& r8) //create the 2D vectors...aka, the floors//////////////////////////////////
{
	for (int i = 0; i < floor1_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor1_size; j++)
		{
			temp.push_back(r1);
		}
		floor1.push_back(temp);
	}

	for (int i = 0; i < floor2_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor2_size; j++)
		{
			temp.push_back(r2);
		}
		floor2.push_back(temp);
	}

	for (int i = 0; i < floor3_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor3_size; j++)
		{
			temp.push_back(r3);
		}
		floor3.push_back(temp);
	}

	for (int i = 0; i < floor4_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor4_size; j++)
		{
			temp.push_back(r4);
		}
		floor4.push_back(temp);
	}

	for (int i = 0; i < floor5_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor5_size; j++)
		{
			temp.push_back(r5);
		}
		floor5.push_back(temp);
	}

	for (int i = 0; i < floor6_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor6_size; j++)
		{
			temp.push_back(r6);
		}
		floor6.push_back(temp);
	}

	for (int i = 0; i < floor7_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor7_size; j++)
		{
			temp.push_back(r7);
		}
		floor7.push_back(temp);
	}

	for (int i = 0; i < floor8_size; i++)
	{
		std::vector<Rooms> temp;
		for (int j = 0; j < floor8_size; j++)
		{
			temp.push_back(r8);
		}
		floor8.push_back(temp);
	}
}
void Dungeons::fill_dungeon()//create the 3D vector...aka, the entire dungeon, filled with floors//////////////////////////////////
{
	dungeon.push_back(floor1);
	dungeon.push_back(floor2);
	dungeon.push_back(floor3);
	dungeon.push_back(floor4);
	dungeon.push_back(floor5);
	dungeon.push_back(floor6);
	dungeon.push_back(floor7);
	dungeon.push_back(floor8);
}
void Dungeons::print_dungeon() //iterate through the entire dungeon////
{
	for (int d = 0; d < dungeon.size(); d++)
	{
		if (d == 0)
		{
			std::cout << "Floor 1 | " << floor1_size << std::endl;
			for (int i = 0; i < floor1.size(); i++)
			{
				for (int j = 0; j < floor1[i].size(); j++)
				{
					std::cout << floor1[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 1)
		{
			std::cout << "Floor 2 | " << floor2_size << std::endl;
			for (int i = 0; i < floor2.size(); i++)
			{
				for (int j = 0; j < floor2[i].size(); j++)
				{
					std::cout << floor2[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 2)
		{
			std::cout << "Floor 3 | " << floor3_size << std::endl;
			for (int i = 0; i < floor3_size; i++)
			{
				for (int j = 0; j < floor3[i].size(); j++)
				{
					std::cout << floor3[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 3)
		{
			std::cout << "Floor 4 | " << floor4_size << std::endl;
			for (int i = 0; i < floor4.size(); i++)
			{
				for (int j = 0; j < floor4[i].size(); j++)
				{
					std::cout << floor4[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 4)
		{
			std::cout << "Floor 5 | " << floor5_size << std::endl;
			for (int i = 0; i < floor5.size(); i++)
			{
				for (int j = 0; j < floor5[i].size(); j++)
				{
					std::cout << floor5[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 5)
		{
			std::cout << "Floor 6 | " << floor6_size << std::endl;
			for (int i = 0; i < floor6.size(); i++)
			{
				for (int j = 0; j < floor6[i].size(); j++)
				{
					std::cout << floor6[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 6)
		{
			std::cout << "Floor 7 | " << floor7_size << std::endl;
			for (int i = 0; i < floor7.size(); i++)
			{
				for (int j = 0; j < floor7[i].size(); j++)
				{
					std::cout << floor7[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		else if (d == 7)
		{
			std::cout << "Floor 8 | " << floor8_size << std::endl;
			for (int i = 0; i < floor8.size(); i++)
			{
				for (int j = 0; j < floor8[i].size(); j++)
				{
					std::cout << floor8[i][j].num_monsters;
				}
				std::cout << std::endl;
			}
		}
		std::cout << std::endl;
	}
}
