//V.0.5.3
#include <iostream>
#include <random> //for rng

//classes///////////////////////////////////
class Monster
{
	private:
		int m_health;
		//int p_min_atk = 1;
		//int p_max_atk = 4;
	public:
	    Monster(int h){m_health = h;}
	    //int increase_p_min_atk();
	    //int increase_p_max_atk();
		void dmg_monster(int atk){m_health -= atk;}
		void battle();
		void m_heal();
		void display_stats();
};
//global RNG stuff
std::random_device dev;
std::mt19937 rng(dev());

void test();
//global variables///////////////////////////////
int p_min_atk = 1;
int p_max_atk = 4;
int monster_count = 0;
void increase_p_atk();
bool chance_increase_p_atk();
void welcome(){std::cout << "**********************************************************************\n" << std::endl;
               std::cout << "************************ Welcome to the game! ************************\n" << std::endl;
               std::cout << "**********************************************************************\n" << std::endl;}
void congrats(){std::cout << "**********************************************************************\n" << std::endl;
                std::cout << "***************** Congrats! You have won the game!!! *****************\n" << std::endl; 
                std::cout << "**********************************************************************\n" << std::endl;}
//main////////////////////////
int main()
{
    welcome();   
    
    int arr_size = 10;
    int arr[arr_size] = {};
    for(int i = 0; i < arr_size; i++)
    {
        int monster_health = (((i+2) * (i+2)) - i);
        Monster monster(monster_health);
        monster.battle();
    }

    congrats();
    return 0;
}

//definitions//////////////////
//int Monster::increase_p_min_atk()
//{
//    p_min_atk += p_min_atk;
//}
//int Monster::increase_p_max_atk()
//{
//    p_max_atk += p_max_atk;
//}

void increase_p_atk()
{
    p_min_atk = (p_min_atk * 2);
    
    p_max_atk = (p_max_atk * 2);
}
bool chance_increase_p_atk()
{
    //setup rng stuff///////////////
	std::uniform_int_distribution<std::mt19937::result_type> dist6(0, 3); // distribution in range [min_atk, max_atk] use: dist6(rng)
	int chance = dist6(rng);
	if(chance < 3)
	{
	    std::cout << "\nChance to increase p atk rolled: " << chance << std::endl;
	    return false;
	}
	else
	{
	    std::cout << "\nChance to increase p atk rolled: " << chance << std::endl;
	    return true;
	}
	
}
int attack(int min_atk, int max_atk)
{
    //setup rng stuff///////////////
	std::uniform_int_distribution<std::mt19937::result_type> dist6(min_atk, max_atk); // distribution in range [min_atk, max_atk] use: dist6(rng)

    //user presses A to attack
	char atk;
	    
	 do
	 {
	    std::cout << "\n\nPress 'A' to attack. ";
	    std::cin.get(atk);
	    std::cin.ignore();
	  }
	  while (!(atk == 'a' || atk == 'A'));
	    
	  //generates, prints, and returns random number for atk value
	  int atk_value = dist6(rng);
	  
	  if(atk_value == max_atk){std::cout << "\nCritical strike for " << atk_value << "!";}
	  //else if(atk_value == 0){std::cout << "\nYour attack missed...";}
	  else {std::cout << "\nYou attack for: " << atk_value;}
	  
	  return atk_value;
}
void Monster::m_heal()
{
	std::uniform_int_distribution<std::mt19937::result_type> dist6(0,3); // distribution in range [0, 3] use: dist6(rng)
	
	int heal = dist6(rng);
	
	if(heal == 3)
	{
	    m_health += 5;
	    std::cout << "\n" << (monster_count + 1) << " heals for 5";
	}
}
void Monster::battle()
{
    display_stats();
    std::cout << "\nPrepare to attack monster " << (monster_count + 1) << "! (" << m_health << " health)";
    
    while(m_health > 0)
    {
	    dmg_monster(attack(p_min_atk, p_max_atk));
	    if(m_health > 0)
	    {
	        m_heal();
	    }
	    std::cout << "\nMonster " << (monster_count + 1) << " Health: " << m_health;
    }

    if(m_health <=0)
    {
	    std::cout << "\n\nYou killed monster " << (monster_count + 1) << "!\n";
	    monster_count++;
	    if(chance_increase_p_atk())
	    {
	        increase_p_atk();
	    }
    }
    else //for debugging
    {
	    std::cout << "\n\nYou -didn't?- kill monster. Something went wrong" << (monster_count + 1) << "?...";
    }
}
void Monster::display_stats()
{
    std::cout << "\n++++++++++++++++++++++++++++++++++++++++++++++++\n";
    std::cout << "Player attack damage: " << p_min_atk << " - " << p_max_atk << "\n";
    std::cout << "Monsters slain:       " << monster_count;
    std::cout << "\n++++++++++++++++++++++++++++++++++++++++++++++++\n";
}
